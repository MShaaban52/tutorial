/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
export declare class jqxValidatorComponent implements OnChanges {
    attrArrow: boolean;
    attrAnimation: any;
    attrAnimationDuration: number;
    attrCloseOnClick: boolean;
    attrFocus: boolean;
    attrHintType: any;
    attrOnError: () => void;
    attrOnSuccess: () => void;
    attrPosition: string;
    attrRules: Array<jqwidgets.ValidatorRule>;
    attrRtl: boolean;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxValidator;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    arrow(arg?: boolean): any;
    animation(arg?: string): any;
    animationDuration(arg?: number): any;
    closeOnClick(arg?: boolean): any;
    focus(arg?: boolean): any;
    hintType(arg?: string): any;
    onError(arg?: () => void): any;
    onSuccess(arg?: () => void): any;
    position(arg?: string): any;
    rules(arg?: Array<jqwidgets.ValidatorRule>): any;
    rtl(arg?: boolean): any;
    hideHint(id: string): void;
    hide(): void;
    updatePosition(): void;
    validate(htmlElement?: any): void;
    validateInput(id: string): void;
    onValidationError: EventEmitter<{}>;
    onValidationSuccess: EventEmitter<{}>;
    __wireEvents__(): void;
}
