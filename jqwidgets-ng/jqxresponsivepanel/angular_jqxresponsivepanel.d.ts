/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
export declare class jqxResponsivePanelComponent implements OnChanges {
    attrAnimationDirection: any;
    attrAnimationHideDelay: number | string;
    attrAnimationShowDelay: number | string;
    attrAnimationType: any;
    attrAutoClose: boolean;
    attrCollapseBreakpoint: number;
    attrCollapseWidth: number;
    attrInitContent: () => void;
    attrTheme: string;
    attrToggleButton: string | any;
    attrToggleButtonSize: number | string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxResponsivePanel;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    animationDirection(arg?: string): any;
    animationHideDelay(arg?: number | string): any;
    animationShowDelay(arg?: number | string): any;
    animationType(arg?: string): any;
    autoClose(arg?: boolean): any;
    collapseBreakpoint(arg?: number): any;
    collapseWidth(arg?: number): any;
    height(arg?: string | number): any;
    initContent(arg?: () => void): any;
    theme(arg?: string): any;
    toggleButton(arg?: string | any): any;
    toggleButtonSize(arg?: number | string): any;
    width(arg?: string | number): any;
    close(): void;
    destroy(): void;
    isCollapsed(): boolean;
    isOpened(): boolean;
    open(): void;
    refresh(): void;
    render(): void;
    onClose: EventEmitter<{}>;
    onCollapse: EventEmitter<{}>;
    onExpand: EventEmitter<{}>;
    onOpen: EventEmitter<{}>;
    __wireEvents__(): void;
}
