/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
export declare class jqxDragDropComponent implements OnChanges {
    attrAppendTo: string;
    attrDisabled: boolean;
    attrDistance: number;
    attrData: any;
    attrDropAction: any;
    attrDropTarget: any;
    attrDragZIndex: number;
    attrFeedback: any;
    attrInitFeedback: (feedback?: any) => void;
    attrOpacity: number;
    attrOnDragEnd: () => void;
    attrOnDrag: (data?: any, position?: any) => void;
    attrOnDragStart: (position?: any) => void;
    attrOnTargetDrop: (data?: any) => void;
    attrOnDropTargetEnter: () => void;
    attrOnDropTargetLeave: (data?: any) => void;
    attrRestricter: any;
    attrRevert: boolean;
    attrRevertDuration: number;
    attrTolerance: any;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxDragDrop;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    appendTo(arg?: string): any;
    disabled(arg?: boolean): any;
    distance(arg?: number): any;
    data(arg?: any): any;
    dropAction(arg?: string): any;
    dropTarget(arg?: any): any;
    dragZIndex(arg?: number): any;
    feedback(arg?: string): any;
    initFeedback(arg?: (feedback?: any) => void): any;
    opacity(arg?: number): any;
    onDragEnd(arg?: () => void): any;
    onDrag(arg?: (data?: any, position?: any) => void): any;
    onDragStart(arg?: (position?: any) => void): any;
    onTargetDrop(arg?: (data?: any) => void): any;
    onDropTargetEnter(arg?: () => void): any;
    onDropTargetLeave(arg?: (data?: any) => void): any;
    restricter(arg?: string): any;
    revert(arg?: boolean): any;
    revertDuration(arg?: number): any;
    tolerance(arg?: string): any;
    ondragstart: EventEmitter<{}>;
    ondragend: EventEmitter<{}>;
    ondragging: EventEmitter<{}>;
    ondroptargetenter: EventEmitter<{}>;
    ondroptargetleave: EventEmitter<{}>;
    __wireEvents__(): void;
}
