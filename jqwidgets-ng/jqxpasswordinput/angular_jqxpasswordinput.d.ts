/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class jqxPasswordInputComponent implements ControlValueAccessor, OnChanges {
    attrDisabled: boolean;
    attrLocalization: jqwidgets.PasswordInputLocalization;
    attrMaxLength: number | string;
    attrPlaceHolder: number | string;
    attrPasswordStrength: (password: string | number, characters: any, defaultStrength: string) => string;
    attrRtl: boolean;
    attrStrengthColors: jqwidgets.PasswordInputStrengthColors;
    attrShowStrength: boolean;
    attrShowStrengthPosition: any;
    attrStrengthTypeRenderer: (password: string | number, characters: any, defaultStrength: string) => string;
    attrShowPasswordIcon: boolean;
    attrTheme: string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxPasswordInput;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    ngValue: any;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setOptions(options: any): void;
    disabled(arg?: boolean): any;
    height(arg?: string | number): any;
    localization(arg?: jqwidgets.PasswordInputLocalization): any;
    maxLength(arg?: number | string): any;
    placeHolder(arg?: number | string): any;
    passwordStrength(arg?: (password: string | number, characters: any, defaultStrength: string) => string): any;
    rtl(arg?: boolean): any;
    strengthColors(arg?: jqwidgets.PasswordInputStrengthColors): any;
    showStrength(arg?: boolean): any;
    showStrengthPosition(arg?: string): any;
    strengthTypeRenderer(arg?: (password: string | number, characters: any, defaultStrength: string) => string): any;
    showPasswordIcon(arg?: boolean): any;
    theme(arg?: string): any;
    width(arg?: string | number): any;
    render(): void;
    refresh(): void;
    val(value?: string): any;
    onChange: EventEmitter<{}>;
    __wireEvents__(): void;
}
