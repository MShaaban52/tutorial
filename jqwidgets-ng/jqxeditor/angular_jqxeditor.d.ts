/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class jqxEditorComponent implements ControlValueAccessor, OnChanges {
    attrCreateCommand: (name: any) => void;
    attrDisabled: boolean;
    attrEditable: boolean;
    attrLineBreak: any;
    attrLocalization: jqwidgets.EditorLocalization;
    attrPasteMode: any;
    attrRtl: boolean;
    attrStylesheets: Array<any>;
    attrTheme: string;
    attrToolbarPosition: any;
    attrTools: string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxEditor;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setOptions(options: any): void;
    createCommand(arg?: (name: any) => void): any;
    disabled(arg?: boolean): any;
    editable(arg?: boolean): any;
    height(arg?: string | number): any;
    lineBreak(arg?: string): any;
    localization(arg?: jqwidgets.EditorLocalization): any;
    pasteMode(arg?: string): any;
    rtl(arg?: boolean): any;
    stylesheets(arg?: Array<any>): any;
    theme(arg?: string): any;
    toolbarPosition(arg?: string): any;
    tools(arg?: string): any;
    width(arg?: string | number): any;
    destroy(): void;
    focus(): void;
    print(): void;
    setMode(mode: boolean): void;
    val(value?: string): any;
    onChange: EventEmitter<{}>;
    __wireEvents__(): void;
}
