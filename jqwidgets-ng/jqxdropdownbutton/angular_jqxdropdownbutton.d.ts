/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
export declare class jqxDropDownButtonComponent implements OnChanges {
    attrAnimationType: any;
    attrArrowSize: number;
    attrAutoOpen: boolean;
    attrCloseDelay: number;
    attrDisabled: boolean;
    attrDropDownHorizontalAlignment: any;
    attrDropDownVerticalAlignment: any;
    attrDropDownWidth: number | string;
    attrEnableBrowserBoundsDetection: boolean;
    attrInitContent: () => void;
    attrOpenDelay: number;
    attrPopupZIndex: number;
    attrRtl: boolean;
    attrTemplate: any;
    attrTheme: string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxDropDownButton;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    animationType(arg?: string): any;
    arrowSize(arg?: number): any;
    autoOpen(arg?: boolean): any;
    closeDelay(arg?: number): any;
    disabled(arg?: boolean): any;
    dropDownHorizontalAlignment(arg?: string): any;
    dropDownVerticalAlignment(arg?: string): any;
    dropDownWidth(arg?: number | string): any;
    enableBrowserBoundsDetection(arg?: boolean): any;
    height(arg?: string | number): any;
    initContent(arg?: () => void): any;
    openDelay(arg?: number): any;
    popupZIndex(arg?: number): any;
    rtl(arg?: boolean): any;
    template(arg?: string): any;
    theme(arg?: string): any;
    width(arg?: string | number): any;
    close(): void;
    destroy(): void;
    focus(): void;
    getContent(): any;
    isOpened(): boolean;
    open(): void;
    setContent(content: string): void;
    onClose: EventEmitter<{}>;
    onOpen: EventEmitter<{}>;
    __wireEvents__(): void;
}
