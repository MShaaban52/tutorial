/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
export declare class jqxTooltipComponent implements OnChanges {
    attrAbsolutePositionX: number;
    attrAbsolutePositionY: number;
    attrAutoHide: boolean;
    attrAutoHideDelay: number;
    attrAnimationShowDelay: number | string;
    attrAnimationHideDelay: number | string;
    attrContent: string;
    attrCloseOnClick: boolean;
    attrDisabled: boolean;
    attrEnableBrowserBoundsDetection: boolean;
    attrLeft: number;
    attrName: string;
    attrOpacity: number;
    attrPosition: any;
    attrRtl: boolean;
    attrShowDelay: number;
    attrShowArrow: boolean;
    attrTop: number | string;
    attrTrigger: any;
    attrTheme: string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxTooltip;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    absolutePositionX(arg?: number): any;
    absolutePositionY(arg?: number): any;
    autoHide(arg?: boolean): any;
    autoHideDelay(arg?: number): any;
    animationShowDelay(arg?: number | string): any;
    animationHideDelay(arg?: number | string): any;
    content(arg?: string): any;
    closeOnClick(arg?: boolean): any;
    disabled(arg?: boolean): any;
    enableBrowserBoundsDetection(arg?: boolean): any;
    height(arg?: number | string): any;
    left(arg?: number): any;
    name(arg?: string): any;
    opacity(arg?: number): any;
    position(arg?: string): any;
    rtl(arg?: boolean): any;
    showDelay(arg?: number): any;
    showArrow(arg?: boolean): any;
    top(arg?: number | string): any;
    trigger(arg?: string): any;
    theme(arg?: string): any;
    width(arg?: number | string): any;
    close(index?: number): void;
    destroy(): void;
    open(left?: number, top?: number): void;
    refresh(): void;
    onClose: EventEmitter<{}>;
    onClosing: EventEmitter<{}>;
    onOpen: EventEmitter<{}>;
    onOpening: EventEmitter<{}>;
    __wireEvents__(): void;
}
