/// <reference path="../jqwidgets.d.ts" />
import { AfterViewInit, AfterViewChecked, EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class jqxComboBoxComponent implements ControlValueAccessor, OnChanges, AfterViewInit, AfterViewChecked {
    attrAnimationType: any;
    attrAutoComplete: boolean;
    attrAutoOpen: boolean;
    attrAutoItemsHeight: boolean;
    attrAutoDropDownHeight: boolean;
    attrCloseDelay: number;
    attrCheckboxes: boolean;
    attrDisabled: boolean;
    attrDisplayMember: string;
    attrDropDownHorizontalAlignment: any;
    attrDropDownVerticalAlignment: any;
    attrDropDownHeight: number | string;
    attrDropDownWidth: number | string;
    attrEnableHover: boolean;
    attrEnableSelection: boolean;
    attrEnableBrowserBoundsDetection: boolean;
    attrItemHeight: number;
    attrMultiSelect: boolean;
    attrMinLength: number;
    attrOpenDelay: number;
    attrPopupZIndex: number;
    attrPlaceHolder: string;
    attrRemoteAutoComplete: boolean;
    attrRemoteAutoCompleteDelay: number;
    attrRenderer: (index: number, label?: string, va12313123lue?: any) => string;
    attrRenderSelectedItem: (index: number, item?: any) => string;
    attrRtl: boolean;
    attrSelectedIndex: number;
    attrShowArrow: boolean;
    attrShowCloseButtons: boolean;
    attrSearchMode: any;
    attrSearch: (searchString: string) => void;
    attrSource: Array<any>;
    attrScrollBarSize: number | string;
    attrTemplate: any;
    attrTheme: string;
    attrValidateSelection: (itemValue: string) => boolean;
    attrValueMember: string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxComboBox;
    content: String;
    container: HTMLDivElement;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setOptions(options: any): void;
    animationType(arg?: string): any;
    autoComplete(arg?: boolean): any;
    autoOpen(arg?: boolean): any;
    autoItemsHeight(arg?: boolean): any;
    autoDropDownHeight(arg?: boolean): any;
    closeDelay(arg?: number): any;
    checkboxes(arg?: boolean): any;
    disabled(arg?: boolean): any;
    displayMember(arg?: string): any;
    dropDownHorizontalAlignment(arg?: string): any;
    dropDownVerticalAlignment(arg?: string): any;
    dropDownHeight(arg?: number | string): any;
    dropDownWidth(arg?: number | string): any;
    enableHover(arg?: boolean): any;
    enableSelection(arg?: boolean): any;
    enableBrowserBoundsDetection(arg?: boolean): any;
    height(arg?: string | number): any;
    itemHeight(arg?: number): any;
    multiSelect(arg?: boolean): any;
    minLength(arg?: number): any;
    openDelay(arg?: number): any;
    popupZIndex(arg?: number): any;
    placeHolder(arg?: string): any;
    remoteAutoComplete(arg?: boolean): any;
    remoteAutoCompleteDelay(arg?: number): any;
    renderer(arg?: (index: number, label?: string, va12313123lue?: any) => string): any;
    renderSelectedItem(arg?: (index: number, item?: any) => string): any;
    rtl(arg?: boolean): any;
    selectedIndex(arg?: number): any;
    showArrow(arg?: boolean): any;
    showCloseButtons(arg?: boolean): any;
    searchMode(arg?: string): any;
    search(arg?: (searchString: string) => void): any;
    source(arg?: Array<any>): any;
    scrollBarSize(arg?: number | string): any;
    template(arg?: string): any;
    theme(arg?: string): any;
    validateSelection(arg?: (itemValue: string) => boolean): any;
    valueMember(arg?: string): any;
    width(arg?: string | number): any;
    addItem(item: any): boolean;
    clearSelection(): void;
    clear(): void;
    close(): void;
    checkIndex(index: number): void;
    checkItem(item: any): void;
    checkAll(): void;
    destroy(): void;
    disableItem(item: any): void;
    disableAt(index: number): void;
    enableItem(item: any): void;
    enableAt(index: number): void;
    ensureVisible(index: number): void;
    focus(): void;
    getItem(index: number): any;
    getItemByValue(value: string): any;
    getVisibleItems(): Array<any>;
    getItems(): Array<any>;
    getCheckedItems(): Array<any>;
    getSelectedItem(): any;
    getSelectedItems(): Array<any>;
    getSelectedIndex(): number;
    insertAt(item: any, index: number): boolean;
    isOpened(): boolean;
    indeterminateIndex(index: number): void;
    indeterminateItem(item: any): void;
    loadFromSelect(selectTagId: string): void;
    open(): void;
    removeItem(item: any): boolean;
    removeAt(index: number): boolean;
    selectIndex(index: number): void;
    selectItem(item: any): void;
    searchString(): string;
    updateItem(item: any, itemValue: string): void;
    updateAt(item: any, index: any): void;
    unselectIndex(index: number): void;
    unselectItem(item: any): void;
    uncheckIndex(index: number): void;
    uncheckItem(item: any): void;
    uncheckAll(): void;
    val(value?: string): any;
    onBindingComplete: EventEmitter<{}>;
    onCheckChange: EventEmitter<{}>;
    onClose: EventEmitter<{}>;
    onChange: EventEmitter<{}>;
    onOpen: EventEmitter<{}>;
    onSelect: EventEmitter<{}>;
    onUnselect: EventEmitter<{}>;
    __wireEvents__(): void;
}
