/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class jqxFormattedInputComponent implements ControlValueAccessor, OnChanges {
    attrDisabled: boolean;
    attrDecimalNotation: any;
    attrDropDown: boolean;
    attrDropDownWidth: number | string;
    attrMin: number | string;
    attrMax: number | string;
    attrPlaceHolder: string;
    attrPopupZIndex: number;
    attrRoundedCorners: boolean;
    attrRtl: boolean;
    attrRadix: number | string;
    attrSpinButtons: boolean;
    attrSpinButtonsStep: number;
    attrTemplate: any;
    attrTheme: string;
    attrUpperCase: boolean;
    attrValue: number | string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxFormattedInput;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    ngValue: any;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setOptions(options: any): void;
    disabled(arg?: boolean): any;
    decimalNotation(arg?: string): any;
    dropDown(arg?: boolean): any;
    dropDownWidth(arg?: number | string): any;
    height(arg?: number | string): any;
    min(arg?: number | string): any;
    max(arg?: number | string): any;
    placeHolder(arg?: string): any;
    popupZIndex(arg?: number): any;
    roundedCorners(arg?: boolean): any;
    rtl(arg?: boolean): any;
    radix(arg?: number | string): any;
    spinButtons(arg?: boolean): any;
    spinButtonsStep(arg?: number): any;
    template(arg?: string): any;
    theme(arg?: string): any;
    upperCase(arg?: boolean): any;
    value(arg?: undefined): any;
    width(arg?: number | string): any;
    close(): void;
    destroy(): void;
    focus(): void;
    open(): void;
    render(): void;
    refresh(): void;
    selectAll(): void;
    selectFirst(): void;
    selectLast(): void;
    val(value?: number | string): any;
    onChange: EventEmitter<{}>;
    onClose: EventEmitter<{}>;
    onOpen: EventEmitter<{}>;
    onRadixChange: EventEmitter<{}>;
    __wireEvents__(): void;
}
