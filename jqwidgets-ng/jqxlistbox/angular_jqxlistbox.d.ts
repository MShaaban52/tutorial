/// <reference path="../jqwidgets.d.ts" />
import { AfterViewInit, AfterViewChecked, EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class jqxListBoxComponent implements ControlValueAccessor, OnChanges, AfterViewInit, AfterViewChecked {
    attrAutoHeight: boolean;
    attrAllowDrag: boolean;
    attrAllowDrop: boolean;
    attrCheckboxes: boolean;
    attrDisabled: boolean;
    attrDisplayMember: number | string;
    attrDropAction: any;
    attrDragStart: (item: any) => boolean;
    attrDragEnd: (dragItem: any, dropItem: any) => boolean;
    attrEnableHover: boolean;
    attrEnableSelection: boolean;
    attrEqualItemsWidth: boolean;
    attrFilterable: boolean;
    attrFilterHeight: number;
    attrFilterDelay: number | string;
    attrFilterPlaceHolder: number | string;
    attrHasThreeStates: boolean;
    attrItemHeight: number;
    attrIncrementalSearch: boolean;
    attrIncrementalSearchDelay: number | string;
    attrMultiple: boolean;
    attrMultipleextended: boolean;
    attrRenderer: (index: number, label: string | number, value: string | number) => string;
    attrRendered: () => any;
    attrRtl: boolean;
    attrSelectedIndex: number | string;
    attrSelectedIndexes: any;
    attrSource: Array<any>;
    attrScrollBarSize: number;
    attrSearchMode: any;
    attrTheme: string;
    attrValueMember: number | string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxListBox;
    content: String;
    container: HTMLDivElement;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setOptions(options: any): void;
    autoHeight(arg?: boolean): any;
    allowDrag(arg?: boolean): any;
    allowDrop(arg?: boolean): any;
    checkboxes(arg?: boolean): any;
    disabled(arg?: boolean): any;
    displayMember(arg?: number | string): any;
    dropAction(arg?: string): any;
    dragStart(arg?: (item: any) => boolean): any;
    dragEnd(arg?: (dragItem: any, dropItem: any) => boolean): any;
    enableHover(arg?: boolean): any;
    enableSelection(arg?: boolean): any;
    equalItemsWidth(arg?: boolean): any;
    filterable(arg?: boolean): any;
    filterHeight(arg?: number): any;
    filterDelay(arg?: number | string): any;
    filterPlaceHolder(arg?: number | string): any;
    height(arg?: string | number): any;
    hasThreeStates(arg?: boolean): any;
    itemHeight(arg?: number): any;
    incrementalSearch(arg?: boolean): any;
    incrementalSearchDelay(arg?: number | string): any;
    multiple(arg?: boolean): any;
    multipleextended(arg?: boolean): any;
    renderer(arg?: (index: number, label: string | number, value: string | number) => string): any;
    rendered(arg?: () => any): any;
    rtl(arg?: boolean): any;
    selectedIndex(arg?: number | string): any;
    selectedIndexes(arg?: any): any;
    source(arg?: Array<any>): any;
    scrollBarSize(arg?: number): any;
    searchMode(arg?: string): any;
    theme(arg?: string): any;
    valueMember(arg?: number | string): any;
    width(arg?: string | number): any;
    addItem(Item: any): boolean;
    beginUpdate(): void;
    clear(): void;
    clearSelection(): void;
    checkIndex(Index: number): void;
    checkItem(Item: any): void;
    checkAll(): void;
    clearFilter(): void;
    destroy(): void;
    disableItem(Item: any): void;
    disableAt(Index: number): void;
    enableItem(Item: any): void;
    enableAt(Index: number | string): void;
    ensureVisible(item: any): void;
    endUpdate(): void;
    focus(): void;
    getItems(): Array<any>;
    getSelectedItems(): Array<any>;
    getCheckedItems(): Array<any>;
    getItem(Index: number): any;
    getItemByValue(Item: any): any;
    getSelectedItem(): any;
    getSelectedIndex(): number;
    insertAt(Item: any, Index: number | string): void;
    invalidate(): void;
    indeterminateItem(Item: any): void;
    indeterminateIndex(Index: number): void;
    loadFromSelect(selector: string): void;
    removeItem(Item: any): void;
    removeAt(Index: number | string): void;
    render(): void;
    refresh(): void;
    selectItem(Item: any): void;
    selectIndex(Index: number | string): void;
    updateItem(Item: any, Value: number | string): void;
    updateAt(item: any, index: number | string): void;
    unselectIndex(index: number | string): void;
    unselectItem(item: any): void;
    uncheckIndex(index: number | string): void;
    uncheckItem(item: any): void;
    uncheckAll(): void;
    val(value?: number | string): any;
    onBindingComplete: EventEmitter<{}>;
    onChange: EventEmitter<{}>;
    onCheckChange: EventEmitter<{}>;
    onDragStart: EventEmitter<{}>;
    onDragEnd: EventEmitter<{}>;
    onSelect: EventEmitter<{}>;
    onUnselect: EventEmitter<{}>;
    __wireEvents__(): void;
}
