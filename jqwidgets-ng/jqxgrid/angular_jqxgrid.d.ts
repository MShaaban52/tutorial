/// <reference path="../jqwidgets.d.ts" />
import { AfterViewInit, AfterViewChecked, EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
export declare class jqxGridComponent implements OnChanges, AfterViewInit, AfterViewChecked {
    attrAltrows: boolean;
    attrAltstart: number;
    attrAltstep: number;
    attrAutoshowloadelement: boolean;
    attrAutoshowfiltericon: boolean;
    attrAutoshowcolumnsmenubutton: boolean;
    attrShowcolumnlines: boolean;
    attrShowrowlines: boolean;
    attrShowcolumnheaderlines: boolean;
    attrAdaptive: boolean;
    attrAdaptivewidth: number;
    attrClipboard: boolean;
    attrCloseablegroups: boolean;
    attrColumnsmenuwidth: number;
    attrColumnmenuopening: (menu?: any, datafield?: string, height?: number | string) => boolean;
    attrColumnmenuclosing: (menu?: any, datafield?: string, height?: number | string) => boolean;
    attrCellhover: (cellhtmlElement?: any, x?: number, y?: number) => void;
    attrEnablekeyboarddelete: boolean;
    attrEnableellipsis: boolean;
    attrEnablemousewheel: boolean;
    attrEnableanimations: boolean;
    attrEnabletooltips: boolean;
    attrEnablehover: boolean;
    attrEnablebrowserselection: boolean;
    attrEverpresentrowposition: any;
    attrEverpresentrowheight: number;
    attrEverpresentrowactions: string;
    attrEverpresentrowactionsmode: any;
    attrFilterrowheight: number;
    attrFiltermode: any;
    attrGroupsrenderer: (text?: string, group?: number, expanded?: boolean, data?: any) => string;
    attrGroupcolumnrenderer: (text?: string, group?: number, expanded?: boolean, data?: any) => string;
    attrGroupsexpandedbydefault: boolean;
    attrHandlekeyboardnavigation: (event: any) => boolean;
    attrPagerrenderer: () => any[];
    attrRtl: boolean;
    attrShowdefaultloadelement: boolean;
    attrShowfiltercolumnbackground: boolean;
    attrShowfiltermenuitems: boolean;
    attrShowpinnedcolumnbackground: boolean;
    attrShowsortcolumnbackground: boolean;
    attrShowsortmenuitems: boolean;
    attrShowgroupmenuitems: boolean;
    attrShowrowdetailscolumn: boolean;
    attrShowheader: boolean;
    attrShowgroupsheader: boolean;
    attrShowaggregates: boolean;
    attrShowgroupaggregates: boolean;
    attrShoweverpresentrow: boolean;
    attrShowfilterrow: boolean;
    attrShowemptyrow: boolean;
    attrShowstatusbar: boolean;
    attrStatusbarheight: number;
    attrShowtoolbar: boolean;
    attrSelectionmode: any;
    attrUpdatefilterconditions: (type?: string, defaultconditions?: any) => any;
    attrUpdatefilterpanel: (filtertypedropdown1?: any, filtertypedropdown2?: any, filteroperatordropdown?: any, filterinputfield1?: any, filterinputfield2?: any, filterbutton?: any, clearbutton?: any, columnfilter?: any, filtertype?: any, filterconditions?: any) => any;
    attrTheme: string;
    attrToolbarheight: number;
    attrAutoheight: boolean;
    attrAutorowheight: boolean;
    attrColumnsheight: number;
    attrDeferreddatafields: Array<string>;
    attrGroupsheaderheight: number;
    attrGroupindentwidth: number;
    attrPagerheight: number | string;
    attrRowsheight: number;
    attrScrollbarsize: number | string;
    attrScrollmode: any;
    attrScrollfeedback: (row: any) => string;
    attrAutosavestate: boolean;
    attrAutoloadstate: boolean;
    attrColumns: jqwidgets.GridColumn[];
    attrColumngroups: Array<any>;
    attrColumnsmenu: boolean;
    attrColumnsresize: boolean;
    attrColumnsautoresize: boolean;
    attrColumnsreorder: boolean;
    attrDisabled: boolean;
    attrEditable: boolean;
    attrEditmode: any;
    attrFilter: (cellValue?: any, rowData?: any, dataField?: string, filterGroup?: any, defaultFilterResult?: boolean) => any;
    attrFilterable: boolean;
    attrGroupable: boolean;
    attrGroups: Array<string>;
    attrHorizontalscrollbarstep: number;
    attrHorizontalscrollbarlargestep: number;
    attrInitrowdetails: (index?: number, parentElement?: any, gridElement?: any, datarecord?: any) => void;
    attrKeyboardnavigation: boolean;
    attrLocalization: jqwidgets.GridLocalizationobject;
    attrPagesize: number;
    attrPagesizeoptions: Array<number | string>;
    attrPagermode: any;
    attrPagerbuttonscount: number;
    attrPageable: boolean;
    attrRowdetails: boolean;
    attrRowdetailstemplate: any;
    attrReady: () => void;
    attrRendered: () => void;
    attrRenderstatusbar: (statusbar?: any) => void;
    attrRendertoolbar: (toolbar?: any) => void;
    attrRendergridrows: (params?: any) => any;
    attrSortable: boolean;
    attrSortmode: string;
    attrSelectedrowindex: number;
    attrSelectedrowindexes: Array<number>;
    attrSource: jqwidgets.GridSource;
    attrSorttogglestates: any;
    attrUpdatedelay: number;
    attrVirtualmode: boolean;
    attrVerticalscrollbarstep: number;
    attrVerticalscrollbarlargestep: number;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxGrid;
    content: String;
    container: HTMLDivElement;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    altrows(arg?: boolean): any;
    altstart(arg?: number): any;
    altstep(arg?: number): any;
    autoshowloadelement(arg?: boolean): any;
    autoshowfiltericon(arg?: boolean): any;
    autoshowcolumnsmenubutton(arg?: boolean): any;
    showcolumnlines(arg?: boolean): any;
    showrowlines(arg?: boolean): any;
    showcolumnheaderlines(arg?: boolean): any;
    adaptive(arg?: boolean): any;
    adaptivewidth(arg?: number): any;
    clipboard(arg?: boolean): any;
    closeablegroups(arg?: boolean): any;
    columnsmenuwidth(arg?: number): any;
    columnmenuopening(arg?: (menu?: any, datafield?: string, height?: number | string) => boolean): any;
    columnmenuclosing(arg?: (menu?: any, datafield?: string, height?: number | string) => boolean): any;
    cellhover(arg?: (cellhtmlElement?: any, x?: number, y?: number) => void): any;
    enablekeyboarddelete(arg?: boolean): any;
    enableellipsis(arg?: boolean): any;
    enablemousewheel(arg?: boolean): any;
    enableanimations(arg?: boolean): any;
    enabletooltips(arg?: boolean): any;
    enablehover(arg?: boolean): any;
    enablebrowserselection(arg?: boolean): any;
    everpresentrowposition(arg?: string): any;
    everpresentrowheight(arg?: number): any;
    everpresentrowactions(arg?: string): any;
    everpresentrowactionsmode(arg?: string): any;
    filterrowheight(arg?: number): any;
    filtermode(arg?: string): any;
    groupsrenderer(arg?: (text?: string, group?: number, expanded?: boolean, data?: any) => string): any;
    groupcolumnrenderer(arg?: (text?: string, group?: number, expanded?: boolean, data?: any) => string): any;
    groupsexpandedbydefault(arg?: boolean): any;
    handlekeyboardnavigation(arg?: (event: any) => boolean): any;
    pagerrenderer(arg?: () => any[]): any;
    rtl(arg?: boolean): any;
    showdefaultloadelement(arg?: boolean): any;
    showfiltercolumnbackground(arg?: boolean): any;
    showfiltermenuitems(arg?: boolean): any;
    showpinnedcolumnbackground(arg?: boolean): any;
    showsortcolumnbackground(arg?: boolean): any;
    showsortmenuitems(arg?: boolean): any;
    showgroupmenuitems(arg?: boolean): any;
    showrowdetailscolumn(arg?: boolean): any;
    showheader(arg?: boolean): any;
    showgroupsheader(arg?: boolean): any;
    showaggregates(arg?: boolean): any;
    showgroupaggregates(arg?: boolean): any;
    showeverpresentrow(arg?: boolean): any;
    showfilterrow(arg?: boolean): any;
    showemptyrow(arg?: boolean): any;
    showstatusbar(arg?: boolean): any;
    statusbarheight(arg?: number): any;
    showtoolbar(arg?: boolean): any;
    selectionmode(arg?: string): any;
    updatefilterconditions(arg?: (type?: string, defaultconditions?: any) => any): any;
    updatefilterpanel(arg?: (filtertypedropdown1?: any, filtertypedropdown2?: any, filteroperatordropdown?: any, filterinputfield1?: any, filterinputfield2?: any, filterbutton?: any, clearbutton?: any, columnfilter?: any, filtertype?: any, filterconditions?: any) => any): any;
    theme(arg?: string): any;
    toolbarheight(arg?: number): any;
    autoheight(arg?: boolean): any;
    autorowheight(arg?: boolean): any;
    columnsheight(arg?: number): any;
    deferreddatafields(arg?: Array<string>): any;
    groupsheaderheight(arg?: number): any;
    groupindentwidth(arg?: number): any;
    height(arg?: number | string): any;
    pagerheight(arg?: number | string): any;
    rowsheight(arg?: number): any;
    scrollbarsize(arg?: number | string): any;
    scrollmode(arg?: string): any;
    scrollfeedback(arg?: (row: any) => string): any;
    width(arg?: string | number): any;
    autosavestate(arg?: boolean): any;
    autoloadstate(arg?: boolean): any;
    columns(arg?: jqwidgets.GridColumn[]): any;
    columngroups(arg?: Array<any>): any;
    columnsmenu(arg?: boolean): any;
    columnsresize(arg?: boolean): any;
    columnsautoresize(arg?: boolean): any;
    columnsreorder(arg?: boolean): any;
    disabled(arg?: boolean): any;
    editable(arg?: boolean): any;
    editmode(arg?: string): any;
    filter(arg?: (cellValue?: any, rowData?: any, dataField?: string, filterGroup?: any, defaultFilterResult?: boolean) => any): any;
    filterable(arg?: boolean): any;
    groupable(arg?: boolean): any;
    groups(arg?: Array<string>): any;
    horizontalscrollbarstep(arg?: number): any;
    horizontalscrollbarlargestep(arg?: number): any;
    initrowdetails(arg?: (index?: number, parentElement?: any, gridElement?: any, datarecord?: any) => void): any;
    keyboardnavigation(arg?: boolean): any;
    localization(arg?: jqwidgets.GridLocalizationobject): any;
    pagesize(arg?: number): any;
    pagesizeoptions(arg?: Array<number | string>): any;
    pagermode(arg?: string): any;
    pagerbuttonscount(arg?: number): any;
    pageable(arg?: boolean): any;
    rowdetails(arg?: boolean): any;
    rowdetailstemplate(arg?: any): any;
    ready(arg?: () => void): any;
    rendered(arg?: () => void): any;
    renderstatusbar(arg?: (statusbar?: any) => void): any;
    rendertoolbar(arg?: (toolbar?: any) => void): any;
    rendergridrows(arg?: (params?: any) => any): any;
    sortable(arg?: boolean): any;
    sortmode(arg?: string): any;
    selectedrowindex(arg?: number): any;
    selectedrowindexes(arg?: Array<number>): any;
    source(arg?: jqwidgets.GridSource): any;
    sorttogglestates(arg?: string): any;
    updatedelay(arg?: number): any;
    virtualmode(arg?: boolean): any;
    verticalscrollbarstep(arg?: number): any;
    verticalscrollbarlargestep(arg?: number): any;
    autoresizecolumns(type?: string): void;
    autoresizecolumn(dataField: string, type?: string): void;
    beginupdate(): void;
    clear(): void;
    destroy(): void;
    endupdate(): void;
    ensurerowvisible(rowBoundIndex: number): void;
    focus(): void;
    getcolumnindex(dataField: string): number;
    getcolumn(dataField: string): jqwidgets.GridGetColumn;
    getcolumnproperty(dataField: string, propertyName: string): any;
    getrowid(rowBoundIndex: number): string;
    getrowdata(rowBoundIndex: number): any;
    getrowdatabyid(rowID: string): any;
    getrowboundindexbyid(rowID: string): number;
    getrowboundindex(rowDisplayIndex: number): number;
    getrows(): Array<any>;
    getboundrows(): Array<any>;
    getdisplayrows(): Array<any>;
    getdatainformation(): jqwidgets.GridGetDataInformation;
    getsortinformation(): jqwidgets.GridGetSortInformation;
    getpaginginformation(): jqwidgets.GridGetPagingInformation;
    hidecolumn(dataField: string): void;
    hideloadelement(): void;
    hiderowdetails(rowBoundIndex: number): void;
    iscolumnvisible(dataField: string): boolean;
    iscolumnpinned(dataField: string): boolean;
    localizestrings(localizationobject: jqwidgets.GridLocalizationobject): void;
    pincolumn(dataField: string): void;
    refreshdata(): void;
    refresh(): void;
    render(): void;
    scrolloffset(top: number, left: number): void;
    scrollposition(): jqwidgets.GridScrollPosition;
    showloadelement(): void;
    showrowdetails(rowBoundIndex: number): void;
    setcolumnindex(dataField: string, index: number): void;
    setcolumnproperty(dataField: string, propertyName: any, propertyValue: any): void;
    showcolumn(dataField: string): void;
    unpincolumn(dataField: string): void;
    updatebounddata(type?: any): void;
    updating(): boolean;
    getsortcolumn(): string;
    removesort(): void;
    sortby(dataField: string, sortOrder: string): void;
    addgroup(dataField: string): void;
    cleargroups(): void;
    collapsegroup(group: number | string): void;
    collapseallgroups(): void;
    expandallgroups(): void;
    expandgroup(group: number | string): void;
    getrootgroupscount(): number;
    getgroup(groupIndex: number): jqwidgets.GridGetGroup;
    insertgroup(groupIndex: number, dataField: string): void;
    iscolumngroupable(): boolean;
    removegroupat(groupIndex: number): void;
    removegroup(dataField: string): void;
    addfilter(dataField: string, filterGroup: any, refreshGrid?: boolean): void;
    applyfilters(): void;
    clearfilters(): void;
    getfilterinformation(): any;
    getcolumnat(index: number): any;
    removefilter(dataField: string, refreshGrid: boolean): void;
    refreshfilterrow(): void;
    gotopage(pagenumber: number): void;
    gotoprevpage(): void;
    gotonextpage(): void;
    addrow(rowIds: any, data: any, rowPosition?: any): void;
    begincelledit(rowBoundIndex: number, dataField: string): void;
    beginrowedit(rowBoundIndex: number): void;
    closemenu(): void;
    deleterow(rowIds: string | number | Array<number | string>): void;
    endcelledit(rowBoundIndex: number, dataField: string, confirmChanges: boolean): void;
    endrowedit(rowBoundIndex: number, confirmChanges: boolean): void;
    getcell(rowBoundIndex: number, datafield: string): jqwidgets.GridGetCell;
    getcellatposition(left: number, top: number): jqwidgets.GridGetCell;
    getcelltext(rowBoundIndex: number, dataField: string): string;
    getcelltextbyid(rowID: string, dataField: string): string;
    getcellvaluebyid(rowID: string, dataField: string): any;
    getcellvalue(rowBoundIndex: number, dataField: string): any;
    isBindingCompleted(): boolean;
    openmenu(dataField: string): void;
    setcellvalue(rowBoundIndex: number, dataField: string, value: any): void;
    setcellvaluebyid(rowID: string, dataField: string, value: any): void;
    showvalidationpopup(rowBoundIndex: number, dataField: string, validationMessage: string): void;
    updaterow(rowIds: string | number | Array<number | string>, data: any): void;
    clearselection(): void;
    getselectedrowindex(): number;
    getselectedrowindexes(): Array<number>;
    getselectedcell(): jqwidgets.GridGetSelectedCell;
    getselectedcells(): Array<jqwidgets.GridGetSelectedCell>;
    selectcell(rowBoundIndex: number, dataField: string): void;
    selectallrows(): void;
    selectrow(rowBoundIndex: number): void;
    unselectrow(rowBoundIndex: number): void;
    unselectcell(rowBoundIndex: number, dataField: string): void;
    getcolumnaggregateddata(dataField: string, aggregates: Array<any>): string;
    refreshaggregates(): void;
    renderaggregates(): void;
    exportdata(dataType: string, fileName?: string, exportHeader?: boolean, rows?: Array<number>, exportHiddenColumns?: boolean, serverURL?: string, charSet?: string): any;
    getstate(): jqwidgets.GridGetState;
    loadstate(stateobject: any): void;
    savestate(): jqwidgets.GridGetState;
    onBindingcomplete: EventEmitter<{}>;
    onColumnresized: EventEmitter<{}>;
    onColumnreordered: EventEmitter<{}>;
    onColumnclick: EventEmitter<{}>;
    onCellclick: EventEmitter<{}>;
    onCelldoubleclick: EventEmitter<{}>;
    onCellselect: EventEmitter<{}>;
    onCellunselect: EventEmitter<{}>;
    onCellvaluechanged: EventEmitter<{}>;
    onCellbeginedit: EventEmitter<{}>;
    onCellendedit: EventEmitter<{}>;
    onFilter: EventEmitter<{}>;
    onGroupschanged: EventEmitter<{}>;
    onGroupexpand: EventEmitter<{}>;
    onGroupcollapse: EventEmitter<{}>;
    onPagechanged: EventEmitter<{}>;
    onPagesizechanged: EventEmitter<{}>;
    onRowclick: EventEmitter<{}>;
    onRowdoubleclick: EventEmitter<{}>;
    onRowselect: EventEmitter<{}>;
    onRowunselect: EventEmitter<{}>;
    onRowexpand: EventEmitter<{}>;
    onRowcollapse: EventEmitter<{}>;
    onSort: EventEmitter<{}>;
    __wireEvents__(): void;
}
