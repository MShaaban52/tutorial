/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
export declare class jqxExpanderComponent implements OnChanges {
    attrAnimationType: any;
    attrArrowPosition: any;
    attrCollapseAnimationDuration: number;
    attrDisabled: boolean;
    attrExpanded: boolean;
    attrExpandAnimationDuration: number;
    attrHeaderPosition: any;
    attrInitContent: () => void;
    attrRtl: boolean;
    attrShowArrow: boolean;
    attrTheme: string;
    attrToggleMode: any;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxExpander;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    animationType(arg?: string): any;
    arrowPosition(arg?: string): any;
    collapseAnimationDuration(arg?: number): any;
    disabled(arg?: boolean): any;
    expanded(arg?: boolean): any;
    expandAnimationDuration(arg?: number): any;
    height(arg?: number | string): any;
    headerPosition(arg?: string): any;
    initContent(arg?: () => void): any;
    rtl(arg?: boolean): any;
    showArrow(arg?: boolean): any;
    theme(arg?: string): any;
    toggleMode(arg?: string): any;
    width(arg?: number | string): any;
    collapse(): void;
    disable(): void;
    destroy(): void;
    enable(): void;
    expand(): void;
    focus(): void;
    getContent(): string;
    getHeaderContent(): string;
    invalidate(): void;
    refresh(): void;
    render(): void;
    setHeaderContent(headerContent: string): void;
    setContent(content: string): void;
    onCollapsing: EventEmitter<{}>;
    onCollapsed: EventEmitter<{}>;
    onExpanding: EventEmitter<{}>;
    onExpanded: EventEmitter<{}>;
    __wireEvents__(): void;
}
