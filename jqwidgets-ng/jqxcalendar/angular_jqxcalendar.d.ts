/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class jqxCalendarComponent implements ControlValueAccessor, OnChanges {
    attrBackText: string;
    attrColumnHeaderHeight: number;
    attrClearString: string;
    attrCulture: string;
    attrDayNameFormat: any;
    attrDisabled: boolean;
    attrEnableWeekend: boolean;
    attrEnableViews: boolean;
    attrEnableOtherMonthDays: boolean;
    attrEnableFastNavigation: boolean;
    attrEnableHover: boolean;
    attrEnableAutoNavigation: boolean;
    attrEnableTooltips: boolean;
    attrForwardText: string;
    attrFirstDayOfWeek: number;
    attrMin: any;
    attrMax: any;
    attrNavigationDelay: number;
    attrRowHeaderWidth: number | string;
    attrReadOnly: boolean;
    attrRestrictedDates: Array<Date>;
    attrRtl: boolean;
    attrStepMonths: number;
    attrShowWeekNumbers: boolean;
    attrShowDayNames: boolean;
    attrShowOtherMonthDays: boolean;
    attrShowFooter: boolean;
    attrSelectionMode: any;
    attrSpecialDates: Array<any>;
    attrTheme: string;
    attrTitleHeight: number;
    attrTitleFormat: any;
    attrTodayString: string;
    attrValue: Date;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxCalendar;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setOptions(options: any): void;
    backText(arg?: string): any;
    columnHeaderHeight(arg?: number): any;
    clearString(arg?: string): any;
    culture(arg?: string): any;
    dayNameFormat(arg?: string): any;
    disabled(arg?: boolean): any;
    enableWeekend(arg?: boolean): any;
    enableViews(arg?: boolean): any;
    enableOtherMonthDays(arg?: boolean): any;
    enableFastNavigation(arg?: boolean): any;
    enableHover(arg?: boolean): any;
    enableAutoNavigation(arg?: boolean): any;
    enableTooltips(arg?: boolean): any;
    forwardText(arg?: string): any;
    firstDayOfWeek(arg?: number): any;
    height(arg?: string | number): any;
    min(arg?: any): any;
    max(arg?: any): any;
    navigationDelay(arg?: number): any;
    rowHeaderWidth(arg?: number | string): any;
    readOnly(arg?: boolean): any;
    restrictedDates(arg?: Array<Date>): any;
    rtl(arg?: boolean): any;
    stepMonths(arg?: number): any;
    showWeekNumbers(arg?: boolean): any;
    showDayNames(arg?: boolean): any;
    showOtherMonthDays(arg?: boolean): any;
    showFooter(arg?: boolean): any;
    selectionMode(arg?: string): any;
    specialDates(arg?: Array<any>): any;
    theme(arg?: string): any;
    titleHeight(arg?: number): any;
    titleFormat(arg?: string): any;
    todayString(arg?: string): any;
    value(arg?: Date): any;
    width(arg?: string | number): any;
    clear(): void;
    destroy(): void;
    focus(): void;
    addSpecialDate(date: any, specialDateClass: any, text: any): void;
    getMinDate(): any;
    getMaxDate(): any;
    getDate(): any;
    getRange(): any;
    navigateForward(months: number): void;
    navigateBackward(months: number): void;
    render(): void;
    refresh(): void;
    setMinDate(date: any): void;
    setMaxDate(date: any): void;
    setDate(date: any): void;
    setRange(date: any, date2: any): void;
    today(): void;
    val(value?: Date, value2?: Date): any;
    onBackButtonClick: EventEmitter<{}>;
    onChange: EventEmitter<{}>;
    onNextButtonClick: EventEmitter<{}>;
    onViewChange: EventEmitter<{}>;
    __wireEvents__(): void;
}
