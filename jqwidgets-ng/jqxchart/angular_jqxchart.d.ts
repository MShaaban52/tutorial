/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
export declare class jqxChartComponent implements OnChanges {
    attrTitle: string;
    attrDescription: string;
    attrSource: any;
    attrShowBorderLine: boolean;
    attrBorderLineColor: string;
    attrBorderLineWidth: number;
    attrBackgroundColor: string;
    attrBackgroundImage: string;
    attrShowLegend: boolean;
    attrLegendLayout: jqwidgets.ChartLegendLayout;
    attrPadding: jqwidgets.ChartPadding;
    attrTitlePadding: jqwidgets.ChartPadding;
    attrColorScheme: string;
    attrGreyScale: boolean;
    attrShowToolTips: boolean;
    attrToolTipShowDelay: number;
    attrToolTipHideDelay: number;
    attrToolTipMoveDuration: number;
    attrDrawBefore: (renderer: any, rect: any) => {};
    attrDraw: (renderer: any, rect: any) => {};
    attrRtl: boolean;
    attrEnableCrosshairs: boolean;
    attrCrosshairsColor: string;
    attrCrosshairsDashStyle: string;
    attrCrosshairsLineWidth: number;
    attrColumnSeriesOverlap: boolean;
    attrEnabled: boolean;
    attrEnableAnimations: boolean;
    attrAnimationDuration: number;
    attrEnableAxisTextAnimation: boolean;
    attrRenderEngine: any;
    attrXAxis: jqwidgets.ChartXAxis;
    attrValueAxis: jqwidgets.ChartValueAxis;
    attrSeriesGroups: Array<jqwidgets.ChartSeriesGroup>;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxChart;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    title(arg?: string): any;
    description(arg?: string): any;
    source(arg?: any): any;
    showBorderLine(arg?: boolean): any;
    borderLineColor(arg?: string): any;
    borderLineWidth(arg?: number): any;
    backgroundColor(arg?: string): any;
    backgroundImage(arg?: string): any;
    showLegend(arg?: boolean): any;
    legendLayout(arg?: jqwidgets.ChartLegendLayout): any;
    padding(arg?: jqwidgets.ChartPadding): any;
    titlePadding(arg?: jqwidgets.ChartPadding): any;
    colorScheme(arg?: string): any;
    greyScale(arg?: boolean): any;
    showToolTips(arg?: boolean): any;
    toolTipShowDelay(arg?: number): any;
    toolTipHideDelay(arg?: number): any;
    toolTipMoveDuration(arg?: number): any;
    drawBefore(arg?: (renderer: any, rect: any) => {}): any;
    draw(arg?: (renderer: any, rect: any) => {}): any;
    rtl(arg?: boolean): any;
    enableCrosshairs(arg?: boolean): any;
    crosshairsColor(arg?: string): any;
    crosshairsDashStyle(arg?: string): any;
    crosshairsLineWidth(arg?: number): any;
    columnSeriesOverlap(arg?: boolean): any;
    enabled(arg?: boolean): any;
    enableAnimations(arg?: boolean): any;
    animationDuration(arg?: number): any;
    enableAxisTextAnimation(arg?: boolean): any;
    renderEngine(arg?: string): any;
    xAxis(arg?: jqwidgets.ChartXAxis): any;
    valueAxis(arg?: jqwidgets.ChartValueAxis): any;
    seriesGroups(arg?: Array<jqwidgets.ChartSeriesGroup>): any;
    getInstance(): any;
    refresh(): void;
    update(): void;
    destroy(): void;
    addColorScheme(schemeName: string, colors: Array<string>): void;
    removeColorScheme(schemeName: string): void;
    getItemsCount(groupIndex: number, serieIndex: number): number;
    getItemCoord(groupIndex: number, serieIndex: number, itemIndex: number): any;
    getXAxisRect(groupIndex: number): jqwidgets.ChartRect;
    getXAxisLabels(groupIndex: number): Array<any>;
    getValueAxisRect(groupIndex: number): jqwidgets.ChartRect;
    getValueAxisLabels(groupIndex: number): Array<any>;
    getColorScheme(colorScheme: string): Array<string>;
    hideSerie(groupIndex: number, serieIndex: number, itemIndex: number): void;
    showSerie(groupIndex: number, serieIndex: number, itemIndex: number): void;
    hideToolTip(hideDelay: number): void;
    showToolTip(groupIndex: number, serieIndex: number, itemIndex: number, showDelay: number, hideDelay: number): void;
    saveAsJPEG(fileName: string, exportServerUrl: string): void;
    saveAsPNG(fileName: string, exportServerUrl: string): void;
    saveAsPDF(fileName: string, exportServerUrl: string): void;
    getXAxisValue(offset: number, groupIndex: number): any;
    getValueAxisValue(offset: number, groupIndex: number): any;
    onToggle: EventEmitter<{}>;
    onClick: EventEmitter<{}>;
    onRefreshBegin: EventEmitter<{}>;
    onRefreshEnd: EventEmitter<{}>;
    onRangeSelectionChanging: EventEmitter<{}>;
    onRangeSelectionChanged: EventEmitter<{}>;
    __wireEvents__(): void;
}
